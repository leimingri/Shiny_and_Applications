[["index.html", "Rmarkdown and Shiny Chapter 1 前言 1.1 布局书 1.2 运行书 1.3 预览书", " Rmarkdown and Shiny Lei mingri 2021-12-18 Chapter 1 前言 这是用 Markdown写的一本简单的草稿书，书中的内容主要是学习过程的总结整理，一步一步从下载安装软件开始，后续进行rmarkdown、shiny、leaflet、plotly等的学习。此外，结合Github上面的COVID-19项目，运用以上几种R包进行数据处理与分析，从而掌握一些可视化R包、开阔眼界。 1.1 布局书 每一个bookdown章节都是一个.Rmd文件 index.Rmd是整本书的第一部分，当运行这本书时，它将成为主页。 1.2 运行书 可以呈现本书籍的HTML版本: 在RStudio IDE中找到Build，并且点击 Build Book，然后选择输出格式； 或者也可以在R console中创建这本书： bookdown::render_book() 如果将书展示成为PDF版本bookdown::pdf_book，需要安装XeLaTeX，当然还是建议安装TinyTeXhttps://yihui.org/tinytex/。 1.3 预览书 可以启动一个本地服务器来实时预览这本书（HTML）。当保存单独.Rmd文件时，此预览会随着编辑图书而更新。 "],["前期工作.html", "Chapter 2 前期工作 2.1 软件准备工作 2.2 熟悉Rmarkdown（利用Rmarkdown制作简历） 2.3 ggplot2绘图入门", " Chapter 2 前期工作 2.1 软件准备工作 2.1.1 注册Github账号 注册一个GitHub账户https://github.com 安装或者更新R和RStudio 下载并安装特定于平台的Git。这里我安装Git(windows)https://gitforwindows.org/ 使用全局命令配置Git。在我完成此过程时，我发现这一步是必要的。打开 bash 版本的 Git 并输入以下内容： git config --global user.name 'leimingri' git config --global user.email 'lmr18845128812@163.com' git config --global --list 替换您的名称和与GitHub帐户相关的电子邮件 已确认可以从命令行对GitHub推/拉 2.1.2 连接Git GitHub,RStudio 这部分主要概述让RStudio与GitHub一起工作的简单步骤。首先您必须了解与 Git 相关的四个术语：存储库、提交、推送和拉取，打开Rstudio并设置Git可执行文件的路径Tools &gt; global options &gt; Git/SVM。首先，在GitHub上面创建一个项目repository，然后将项目地址克隆到RStudio中，接着进行本地的更改、保存及提交，将新增更改的内容保存到GitHub该项目存储库中。 连接RStudio到Git和GitHub 在GitHub上创建存储库（项目）,然后通过RStudio将新的GitHub存储库克隆到您的计算机上，这就是Rstudio如何知道要使用什么存储库，并将其与您的新存储库相关联项目文件。在RStudio中，File &gt; New Project &gt; Version Control &gt; Git。 进行本地更改，保存、提交 现在在新的R项目中做一些工作，创建并保存一些文件。下一步是“提交”您的工作——本质上是复制您所有的脚本文件与R项目相关联。接着Tools&gt;Version Control&gt;Commit将您在本地进行的更改在线推送到GitHub。 确认传播到GitHub远程存储器的本地更改 检查想要提交的文件，然后按下Commit按钮。如果想把这些文件移到GitHub服务器上，点击“Push”。在线查看您的存储库，仔细检查您的文件是否确实在那里。 注：R Markdown官网地址http://rmarkdown.rstudio.com 以上内容参考文献happy-git-with-R 2.1.3 可能遇到的问题 1.错误: LaTeX failed to compile R.tex. 解决办法：链接https://yihui.org/tinytex/r/#debugging for debugging tips.—有时候是插入的图片问题 2.导入GitHub中的URL时，出现‘…Connection was reset, errno 10054’错误时 解决办法：git config --global http.sslVerify “false”即解除ssl验证，再次git即可 3.第一次点选Knit PDF（或Knit HTML)报错Knit PDF : pandoc document conversion failed with error 43 解决办法：可以通过安装 github 上最新的版本解决： install.packages(“devtools”) 如果以前没有安装 devtools 包 devtools::install_github(“rstudio/rmarkdown”) 4.错误：PDF中文问题 latex_engine: xelatex（尝试加上这句话） 5.错误：导入GitHub中的URL时，出现‘…Connection was reset, errno 10054’错误 解决办法：git bash里面git config --global http.sslVerify \"false\"即解除ssl验证，再次git 针对上面的错误，注意：可以多多尝试 方法一：用压缩的方式进行下载 git config --global --add core.compression -1 方法二：.增大缓存大小 524288000表示增至500兆，1048576000表示增至1G git config --global http.postBuffer 524288000 方法三：利用ssh下载 git clone git://github.com/XX/XXXX.git 方法四：安全设置问题 git config http.sslVerify \"false\" 2.2 熟悉Rmarkdown（利用Rmarkdown制作简历） 一些简历资源 链接 简历学习模板1 https://github.com/geekcompany/DeerResume 简历学习模板2 https://github.com/geekcompany/ResumeSample 在线MarkDown简历书写工具 冷熊简历 http://link.ftqq.com/0rsRL 教学：《如何写好技术简历》 http://link.ftqq.com/KWkVX 简历例句 https://github.com/resumejob/awesome-resume 大厂高频面经面试题 https://osjobs.net/topk/ 雨果主题简历制作模板 https://wowchemy.com/hugo-themes/ 2.3 ggplot2绘图入门 2.3.1 基本概念 图层（Layer）：图层可以允许用户一步步的构建图形，方便单独对图层进行修改、增加统计量、甚至改动数据。 标度（Scale）：标度是一种函数，它控制了数学空间到图形元素空间的映射。一组连续数据可以映射到X轴坐标，也可以映射到一组连续的渐变色彩。一组分类数据可以映射成为不同的形状，也可以映射成为不同的大小。 坐标系统（Coordinate）：坐标系统控制了图形的坐标轴并影响所有图形元素，最常用的是直角坐标轴，坐标轴可以进行变换以满足不同的需要，如对数、极坐标轴。 位面（Facet）：很多时候需要将数据按某种方法分组，分别进行绘图。位面就是控制分组绘图的方法和排列形式。 2.3.2 一个例子 用ggplot2包内带的汽车测试数据（mpg）来举个例子，用到的三个变量分别是发动机容量(displ)、高速公路上的每加仑行驶里数(hwy)、汽缸数目(cyl)。首先加载ggplot2包，然后用ggplot定义第一层即数据来源。其中aes参数非常关键，它将displ映射到X轴，将hwy映射到Y轴，将cyl变为分类数据后映射为不同的颜色。然后使用+号添加了两个新的图层，第二层是加上了散点，第三层是加上了loess平滑曲线。 install.packages(&quot;ggplot2&quot;) ## Installing package into &#39;/home/leimingri/R/x86_64-pc-linux-gnu-library/4.1&#39; ## (as &#39;lib&#39; is unspecified) library(ggplot2) p &lt;- ggplot(data=mpg,aes(x=displ,y=hwy,colour=factor(cyl))) p + geom_point() + geom_smooth() ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; 如果需要对整体数据进行平滑，可将colour参数设置在散点图层内而非第一层，这样第三层的平滑图形就不会受到colour参数的影响。 p &lt;- ggplot(mpg,aes(x=displ,y=hwy)) p + geom_point(aes(colour=factor(cyl))) + geom_smooth() ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; 2.3.3 相关图形 2.3.3.1 图层控制与直方图 第一层必须是原始数据层，其中data参数控制数据来源，注意数据形式只能是数据框格式。aes参数控制了对哪些变量进行图形映射，以及映射方式，aes是Aesthetic的缩写。 下面我们来绘制一个直方图作为示例。数据集仍采取mpg，对hwy变量绘制直方图。首先加载了扩展包，然后用ggplot函数建立了第一层，hwy数据映射到X轴上；使用+号增加了第二层，即直方图对象层。此时p被视为一种层对象，使用summary函数可得到关于它的更多信息，print(p)命令即可进行绘图。 library(ggplot2) p &lt;- ggplot(data = mpg,aes(x = hwy)) p &lt;- p + geom_histogram() summary(p) ## data: manufacturer, model, displ, year, cyl, trans, drv, cty, hwy, fl, ## class [234x11] ## mapping: x = ~hwy ## faceting: &lt;ggproto object: Class FacetNull, Facet, gg&gt; ## compute_layout: function ## draw_back: function ## draw_front: function ## draw_labels: function ## draw_panels: function ## finish_data: function ## init_scales: function ## map_data: function ## params: list ## setup_data: function ## setup_params: function ## shrink: TRUE ## train_scales: function ## vars: function ## super: &lt;ggproto object: Class FacetNull, Facet, gg&gt; ## ----------------------------------- ## geom_bar: na.rm = FALSE, orientation = NA ## stat_bin: binwidth = NULL, bins = NULL, na.rm = FALSE, orientation = NA, pad = FALSE ## position_stack print(p) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. p对象含有两层，第一层数据层描述了变量和映射方式，第二层是直方图对象（geom_histogram），geom表示几何对象，它是ggplot中重要的图层控制对象，因为它负责图形渲染的类型。geom_histogram是图形渲染类型的一种。 每个geom对象都需要有数据输入，数据可以从第一层中自动读取，也可以在aes参数中直接设置。而且每个geom还默认搭配某种统计变换（stat），geom_histogram的默认统计变换是stat_bin。它负责对数据进行分组计数。 下面我们尝试两种更为复杂的直方图，首先将数据按照year这个变量划分为两组，用不同的颜色绘制直方图，而且用频率而非计数来刻画Y轴，并添加密度曲线。 p &lt;- ggplot(mpg,aes(hwy)) p + geom_histogram(position = &#39;identity&#39;, alpha=0.5, aes(y = ..density.., fill = factor(year))) + stat_density(geom = &#39;line&#39;, position = &#39;identity&#39;, aes(colour = factor(year))) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. 2.3.3.2 位置调整与条形图 位置调整（Position adjustments）是针对同一图层内元素的位置进行微调的方法。它包括五种设置，分别是stack、dodge、fill、identity、jitter。 我们用条形图来展示其用法，仍使用mpg数据集，其中用到的变量是class，即生产汽车的类型，以及year生产年份。下面的条形图是将各类型的汽车数量进行汇集，并以年份作为分组变量。我们首先载入扩展包，然后用频数表对数据进行大致的了解，最后绘制了四种条形图。 library(ggplot2) with(mpg,table(class,year)) ## year ## class 1999 2008 ## 2seater 2 3 ## compact 25 22 ## midsize 20 21 ## minivan 6 5 ## pickup 16 17 ## subcompact 19 16 ## suv 29 33 p &lt;- ggplot(data=mpg,aes(x=class,fill=factor(year))) p + geom_bar(position=&#39;dodge&#39;) p + geom_bar(position=&#39;stack&#39;) p + geom_bar(position=&#39;fill&#39;) p + geom_bar(position=&#39;identity&#39;,alpha=0.3) 可以看到dodge方式是将不同年份的数据并列放置；stack方式是将不同年份数据推叠放置，这也是geom_bar的默认处理方式；fill方式和stack类似，但Y轴不再是计数，而是以百分比显示；identity方式是不做任何改变直接显示出来，所以需要设置透明度才能看得清楚。 2.3.3.3 散点图 色彩和形状的控制 数据特征不仅可以用坐标来表示，也可以用不同的色彩或形状来表示。仍以mpg数据集为例，所用到的变量有cty（城市中行驶距离）,hwy（高速路行驶距离）,displ（排量大小）,year（生产年份） library(ggplot2) p &lt;- ggplot(mpg, aes(cty, hwy)) p1 &lt;- p + geom_point(aes(colour = factor(year),shape = factor(year), size = displ), alpha = 0.6, position = &#39;jitter&#39;) print(p1) 我们将1999年生产车型用红色圆形表示，2008年用兰色三角形表示，排量用图形的大小表示，并且设置了透明度和jitter以避免样本点之间的重叠。可观察到2008年生产的大排量车型较多，从而油耗较高，单位油耗行驶距离较短。 坐标的控制 上图右上角数据点较为稀疏，这种情况下可用对数变换。为了演示ggplot2对图形坐标的控制，我们对X轴和Y轴均进行对数变换，然后对X轴的坐标显示加以限制，只显示X轴数据的均值，以及一倍标准差的坐标。 cty.mean=with(mpg,mean(cty)) cty.sd=with(mpg,sd(cty)) p1 + scale_x_continuous(trans=&#39;log&#39;,breaks=c(cty.mean-cty.sd,cty.mean,cty.mean+cty.sd), labels=c(&quot;high&quot;, &quot;mean&quot;, &quot;low&quot;)) + scale_y_continuous(trans=&#39;log&#39;) 文字说明 利用geom_text函数可添加文字说明以增强图形的可读性 p &lt;- ggplot(mtcars, aes(x=wt, y=mpg,colour=factor(cyl),label=rownames(mtcars))) p + geom_text(hjust=0,vjust=-1,alpha=0.8)+ geom_point(size=3,aes(shape=factor(cyl))) 2.3.4 ggplot2绘制时间序列变化图 ggplot2包也能对时间序列数据绘图，但在处理上需要有些注意的地方，可能需要注意转化成data.frame。ggplot()可以先将时间序列类型拆成数据框类型然后再绘图。 数据来源：2021全球开放数据应用创新大赛https://www.sodic.com.cn/datasets "],["shiny-app整体介绍.html", "Chapter 3 Shiny APP整体介绍 3.1 基本介绍 3.2 前端介绍（用户端UI） 3.3 反应式编程", " Chapter 3 Shiny APP整体介绍 详细内容请参考学习网址Mastering Shiny 3.1 基本介绍 创建Shiny APP有多种方法，最简单的方法是为你的文件创建一个新的目录，并放入一个app.R的文件，app.R的文件整体布局如下： library(shiny)(加载Shiny包) ui &lt;- fluidPage()（定义用户界面） server &lt;- function(input, output, session) {}（定义服务器功能） shinyApp(ui, server)（从ui和server构建并启动一个shiny应用程序） 3.1.1 添加用户界面控件 例如： library(shiny) ui &lt;- fluidPage( selectInput(&quot;dataset&quot;, label = &quot;Dataset&quot;, choices = ls(&quot;package:datasets&quot;)), verbatimTextOutput(&quot;summary&quot;), tableOutput(&quot;table&quot;) ) 这里fluidPage()是一个布局函数，用于设置页面的基本视觉结构。 selectInput()是一个输入控件，允许用户通过提供一个值与应用程序进行交互。 verbatimTextOutput()和tableOutput()是输出控件，它们告诉Shiny将渲染输出放在哪里。 verbatimTextOutput()显示代码，tableOutput()显示表格。 3.1.2 在服务器函数中定义输出（添加行为） Shiny使用反应式编程使应用程序具有交互性。 例如： server &lt;- function(input, output, session) { output$summary &lt;- renderPrint({ dataset &lt;- get(input$dataset, &quot;package:datasets&quot;) summary(dataset) }) output$table &lt;- renderTable({ dataset &lt;- get(input$dataset, &quot;package:datasets&quot;) dataset }) } 使用特定的render函数来包装您提供的一些代码。 renderPrint()与verbatimTextOutput()配对以显示具有固定宽度(逐字)文本的统计摘要，renderTable()与tableOutput()配对以显示表格中的输入数据。 3.1.3 创建Shiny应用程序 shinyApp(ui=ui, server=server) ## PhantomJS not found. You can install it with webshot::install_phantomjs(). If it is installed, please make sure the phantomjs executable can be found via the PATH variable. Shiny applications not supported in static R Markdown documents 3.2 前端介绍（用户端UI） 3.2.1 inputs sliderInput textInput passwordInput textAreaInput numericInput dateInput dateRangeInput selectInput radioButtons checkboxGroupInput checkboxInput fileInput actionButton 具体应用代码请参考[https://shiny.rstudio.com/gallery/widget-gallery.html]https://shiny.rstudio.com/gallery/widget-gallery.html 3.2.2 outputs 3.2.2.1 Text textOutput() verbatimTextOutput() renderText()将结果组合成一个字符串，通常与textOutput()配对；renderPrint()打印结果，通常与verbatimTextOutput()配对。 ui &lt;- fluidPage( textOutput(&quot;text&quot;), verbatimTextOutput(&quot;code&quot;) ) server &lt;- function(input, output, session) { output$text &lt;- renderText({ &quot;Hello friend!&quot; }) output$code &lt;- renderPrint({ summary(1:10) }) } 3.2.2.2 Tables tableOutput() dataTableOutput() tableOutput()和renderTable()呈现一个静态数据表，一次显示所有数据；dataTableOutput()和renderDataTable()呈现一个动态表，显示固定数量的行以及用于更改哪些行可见的控件。 ui &lt;- fluidPage( tableOutput(&quot;static&quot;), dataTableOutput(&quot;dynamic&quot;) ) server &lt;- function(input, output, session) { output$static &lt;- renderTable(head(mtcars)) output$dynamic &lt;- renderDataTable(mtcars, options = list(pageLength = 5)) } 3.2.2.3 Plots plotOutput() plotOutput() 常与renderPlot()对应； ui &lt;- fluidPage( plotOutput(&quot;plot&quot;, width = &quot;400px&quot;) ) server &lt;- function(input, output, session) { output$plot &lt;- renderPlot(plot(1:5), res = 96) } 3.2.2.4 Downloads downloadButton() downloadLink() 3.3 反应式编程 3.3.1 inputs 注意事项： 1.与典型的列表不同，输入对象是只读的，不可以修改服务器函数内部的输入。 2.它对允许谁阅读它是有选择性的。要读取输入，必须处于由render…()或reactive()等函数创建的反应上下文中。 3.3.2 output 输出与输入非常相似:它也是一个类似列表的对象，根据输出ID命名。主要区别在于，使用它来发送输出，而不是接收输入。 3.3.3 Reactive programming 既有input又有output的应用程序 注意： 如果运行一个Shiny应用程序，代码永远不会运行，仔细检查ui用户界面和server服务器功能使用相同的标识符。 reactive()可以简化许多重复步骤。 server &lt;- function(input, output, session) { x1 &lt;- reactive(rnorm(input$n1, input$mean1, input$sd1)) x2 &lt;- reactive(rnorm(input$n2, input$mean2, input$sd2)) output$hist &lt;- renderPlot({ freqpoly(x1(), x2(), binwidth = input$binwidth, xlim = input$range) }, res = 96) output$ttest &lt;- renderText({ t_test(x1(), x2()) }) } 假设您想通过不断地重新模拟数据来强化这是模拟数据的事实，以便您看到的是动画而不是静态绘图，可以用一个新的函数来增加更新的频率:reactiveTimer()。 server &lt;- function(input, output, session) { timer &lt;- reactiveTimer(500) x1 &lt;- reactive({ timer() rpois(input$n, input$lambda1) }) x2 &lt;- reactive({ timer() rpois(input$n, input$lambda2) }) output$hist &lt;- renderPlot({ freqpoly(x1(), x2(), binwidth = 1, xlim = c(0, 40)) }, res = 96) } 若选择执行昂贵的计算，可以使用是actionButton(): ui &lt;- fluidPage( fluidRow( column(3, numericInput(&quot;lambda1&quot;, label = &quot;lambda1&quot;, value = 3), numericInput(&quot;lambda2&quot;, label = &quot;lambda2&quot;, value = 5), numericInput(&quot;n&quot;, label = &quot;n&quot;, value = 1e4, min = 0), actionButton(&quot;simulate&quot;, &quot;Simulate!&quot;) ), column(9, plotOutput(&quot;hist&quot;)) ) ) server &lt;- function(input, output, session) { x1 &lt;- eventReactive(input$simulate, { rpois(input$n, input$lambda1) }) x2 &lt;- eventReactive(input$simulate, { rpois(input$n, input$lambda2) }) output$hist &lt;- renderPlot({ freqpoly(x1(), x2(), binwidth = 1, xlim = c(0, 40)) }, res = 96) } 需要eventReactive()，它有两个参数:第一个参数指定依赖什么，第二个参数指定计算什么。这使得该应用程序在单击模拟时只能计算x1()和x2()。 "],["shiny-feedback.html", "Chapter 4 Shiny feedback 4.1 Validation 4.2 Notifications", " Chapter 4 Shiny feedback 4.1 Validation 4.1.1 Validating input 无效的输入可能会导致不想向用户显示的非信息性错误。为了阻止输入触发反应性变化您需要一个新工具:req() library(shiny) ui &lt;- fluidPage( shinyFeedback::useShinyFeedback(), numericInput(&quot;n&quot;,&quot;n&quot;,value=10), textOutput(&quot;half&quot;) ) server &lt;- function(input, output, session) { half&lt;-reactive({ even&lt;-input$n %% 2==0 shinyFeedback::feedbackWarning(&quot;n&quot;,!even,&quot;please select an even number!&quot;) #req(even) input$n /2 }) output$half&lt;-renderText(half()) } 4.1.2 Cancelling execution with req() library(shiny) ui &lt;- fluidPage( selectInput(&quot;language&quot;,&quot;Language&quot;,choices = c(&quot;&quot;,&quot;English&quot;,&quot;Maori&quot;)), textInput(&quot;name&quot;,&quot;Name&quot;), textOutput(&quot;greeting&quot;) ) server &lt;- function(input, output, session) { greetings&lt;-c( Engilsh=&quot;Hello&quot;, Maori=&quot;Kia ora&quot; ) output$greeting&lt;-renderText({ #req(input$language,input$name) paste0(greetings[[input$language]],&quot;&quot;,input$name,&quot;!&quot;) }) } 4.1.3 req() and validation 结合req()和shinyFeedback来解决一个更具挑战性的问题 注意cancelOutput = TRUE的用法:通常取消无功会复位所有下游输出；使用cancelOutput = TRUE会让它们显示最后一个good value library(shiny) ui &lt;- fluidPage( shinyFeedback::useShinyFeedback(), textInput(&quot;dataset&quot;, &quot;Dataset name&quot;), tableOutput(&quot;data&quot;) ) server &lt;- function(input, output, session) { data&lt;-reactive({ req(input$dataset) exists&lt;-exists(input$dataset,&quot;package:datasets&quot;) shinyFeedback::feedbackDanger(&quot;dataset&quot;,!exists,&quot;Unknown dataset&quot;) req(exists,cancelOutput = TRUE) get(input$dataset, &quot;package:datasets&quot;) }) output$data&lt;-renderTable({ head(data()) }) } 4.1.4 Validate output 使用内置于shiny: validate()中的工具 validate(message)停止执行代码的其余部分 library(shiny) ui &lt;- fluidPage( numericInput(&quot;x&quot;,&quot;x&quot;,value=0), selectInput(&quot;trans&quot;,&quot;transformation&quot;,choices=c(&quot;square&quot;, &quot;log&quot;, &quot;square-root&quot;)), textOutput(&quot;out&quot;) ) server &lt;- function(input, output, session) { output$out &lt;- renderText({ if (input$x &lt; 0 &amp;&amp; input$trans %in% c(&quot;log&quot;, &quot;square-root&quot;)) { validate(&quot;x can not be negative for this transformation&quot;) } switch(input$trans, square = input$x ^ 2, &quot;square-root&quot; = sqrt(input$x), log = log(input$x) ) }) } 4.2 Notifications 4.2.1 Transient notification 4.2.2 Removing on completion 将持续时间设置为空(duration = NULL)，将关闭按钮设置为假closeButton = FALSE，以便在任务完成之前通知保持可见。 在任务开始时显示通知，并在任务完成时删除通知 使用on.exit()，它确保无论任务如何完成(成功完成或出现错误)，通知都会被删除 on.exit:ensures that the notification is removed "],["shiny-uploads-and-downloads.html", "Chapter 5 Shiny uploads and downloads 5.1 upload 5.2 Download 5.3 Downloading reports", " Chapter 5 Shiny uploads and downloads 5.1 upload library(shiny) ui &lt;- fluidPage( fileInput(&quot;upload&quot;,NULL,buttonLabel=&quot;Upload...&quot;, multiple = TRUE), tableOutput(&quot;files&quot;) ) server &lt;- function(input, output, session) { output$files&lt;-renderTable(input$upload) } 在页面加载时，input\\(upload被初始化为空，所以需要req(input\\)upload)来确保您代码等待直到第一个文件被上传 accept参数允许您限制可能的输入。最简单的方法是提供文件扩展名的字符向量，如accept = “.csv”。但是accept参数只是给浏览器的一个建议，并不总是被强制执行。 在R中获取文件扩展名最简单的方法是tools::file_ext() library(shiny) ui &lt;- fluidPage( fileInput(&quot;upload&quot;,NULL,accept = c(&quot;.csv&quot;,&quot;.tsv&quot;)), numericInput(&quot;n&quot;,&quot;Rows&quot;,value=5, min = 1, step = 1), tableOutput(&quot;head&quot;) ) server &lt;- function(input, output, session) { data&lt;-reactive({ req(input$pload) ext&lt;-tools::file_ext() switch(ext, csv=vroom::vroom(input$upload$datapath,delim=&quot;,&quot;), tsv=vroom::vroom(input$upload$datapath,delim=&quot;\\t&quot;), validate(&quot;Invalid file; Please upload a .csv or .tsv file&quot;)) }) output$head&lt;-renderTable({ head(data(),input$n) }) } 5.2 Download 用户界面很简单:使用downloadButton(id)或downloadLink(id)给用户一些东西来点击下载文件 与其他输出不同,downloadButton()没有与渲染函数配对,可以使用downloadHandler() downloadHandler()有两个参数,都是函数:filename是一个没有参数的函数,它返回一个文件名(作为字符串),此功能的工作是创建将在下载对话框中显示给用户的名称。content应该是带有一个参数file的函数,file是保存文件的路径。这个函数的工作是将文件保存在Shiny知道的地方，这样它就可以将文件发送给用户 library(shiny) ui &lt;- fluidPage( selectInput(&quot;dataset&quot;, &quot;Pick a dataset&quot;, ls(&quot;package:datasets&quot;)), tableOutput(&quot;preview&quot;), downloadButton(&quot;download&quot;,&quot;Download.tsv&quot;) ) server &lt;- function(input, output, session) { data &lt;- reactive({ out &lt;- get(input$dataset, &quot;package:datasets&quot;) if (!is.data.frame(out)) { validate(paste0(&quot;&#39;&quot;, input$dataset, &quot;&#39; is not a data frame&quot;)) } out }) output$preview &lt;- renderTable({ head(data()) }) output$download &lt;- downloadHandler( filename = function() { paste0(input$dataset, &quot;.tsv&quot;) }, content = function(file) { vroom::vroom_write(data(), file) } ) } 5.3 Downloading reports 生成报告的一个强大方法是使用参数化的RMarkdown文档。参数化的RMarkdown文件在YAML元数据中有一个参数字段 library(shiny) ui &lt;- fluidPage( sliderInput(&quot;n&quot;, &quot;Number of points&quot;, 1, 100, 50), downloadButton(&quot;report&quot;, &quot;Generate report&quot;) ) server &lt;- function(input, output, session) { output$report &lt;- downloadHandler( filename = &quot;report.html&quot;, content = function(file) { params &lt;- list(n = input$n) id &lt;- showNotification( &quot;Rendering report...&quot;, duration = NULL, closeButton = FALSE ) on.exit(removeNotification(id), add = TRUE) rmarkdown::render(&quot;report.Rmd&quot;, output_file = file, params = params, envir = new.env(parent = globalenv()) ) } ) } "],["shiny-dynamic-ui.html", "Chapter 6 Shiny Dynamic UI 6.1 Updating inputs 6.2 Dynamic visibility 6.3 Creating UI with code", " Chapter 6 Shiny Dynamic UI 创建动态用户界面有三种关键技术: 使用update更新函数族修改输入控件的参数 使用tabsetPanel()有条件地显示和隐藏部分用户界面 使用uiOutput()和renderUI()用代码生成用户界面的选定部分 6.1 Updating inputs library(shiny) ui &lt;- fluidPage( numericInput(&quot;n&quot;,&quot;Simulations&quot;,10), actionButton(&quot;simulate&quot;,&quot;Simulate&quot;) ) server &lt;- function(input, output, session) { observeEvent(input$n, { label&lt;-paste0(&quot;Simulate&quot;,input$n,&quot;times&quot;) updateActionButton(inputId = &quot;simulate&quot;,label=label) }) } library(shiny) ui &lt;- fluidPage( selectInput(&quot;dataset&quot;,&quot;Choose a dataset&quot;,c(&quot;pressure&quot;,&quot;cars&quot;)), selectInput(&quot;column&quot;,&quot;Choose column&quot;,character(0)), verbatimTextOutput(&quot;summary&quot;) ) server &lt;- function(input, output, session) { # freezeReactiveValue(input,&quot;column&quot;) dataset&lt;-reactive(get(input$dataset,&quot;package:datasets&quot;)) observeEvent(input$dataset,{ updateSelectInput(inputId = &quot;column&quot;,choices = names(dataset())) }) output$summary&lt;-renderPrint({ summary(dataset()[[input$column]]) }) } 6.2 Dynamic visibility library(shiny) ui &lt;- fluidPage( sidebarLayout( sidebarPanel( selectInput(&quot;controller&quot;,&quot;Show&quot;,choices = paste0(&quot;panel&quot;,1:3)) ), mainPanel( tabsetPanel( id=&quot;switcher&quot;, type=&quot;hidden&quot;, tabPanelBody(&quot;panel1&quot;,&quot;Panel 1 content&quot;), tabPanelBody(&quot;panel2&quot;,&quot;Panel 2 content&quot;), tabPanelBody(&quot;panel3&quot;,&quot;Panel 3 content&quot;) ) ) ) ) server &lt;- function(input, output, session) { observeEvent(input$controller,{ updateTabsetPanel(inputId = &quot;switcher&quot;,selected=input$controller) }) } library(shiny) ui &lt;- fluidPage( sidebarLayout( sidebarPanel( selectInput(&quot;dist&quot;,&quot;Distribution&quot;, choices=c(&quot;normal&quot;,&quot;uniform&quot;,&quot;exponential&quot;)), numericInput(&quot;n&quot;,&quot;Number of samples&quot;,value=100), parameter_tabs&lt;-tabsetPanel( id=&quot;params&quot;, type=&quot;hidden&quot;, tabPanel(&quot;normal&quot;, numericInput(&quot;mean&quot;,&quot;mean&quot;,value=1), numericInput(&quot;sd&quot;,&quot;standard deviation&quot;,min=0,value=1)), tabPanel(&quot;uniform&quot;, numericInput(&quot;min&quot;,&quot;min&quot;,value=0), numericInput(&quot;max&quot;,&quot;max&quot;,value=1)), tabPanel(&quot;exponential&quot;, numericInput(&quot;rate&quot;,&quot;rate&quot;,value=1,min=0)) ) ), mainPanel( plotOutput(&quot;hist&quot;) ) ) ) server &lt;- function(input, output, session) { observeEvent(input$dist,{ updateTabsetPanel(inputId=&quot;params&quot;,selected = input$dist) }) sample&lt;-reactive({ switch(input$dist, normal=rnorm(input$n,input$mean,input$sd), uniform=runif(input$n,input$min,input$max), exponential=rexp(input$n,input $ rate)) }) output$hist&lt;-renderPlot(hist(sample()),res=96) } library(shiny) ui &lt;- fluidPage( tabsetPanel( id=&quot;wizard&quot;, type=&quot;hidden&quot;, tabPanel(&quot;page_1&quot;, &quot;Welcome!&quot;, actionButton(&quot;page_12&quot;,&quot;next&quot;)), tabPanel(&quot;page_2&quot;,&quot;Only one page to go&quot;, actionButton(&quot;page_21&quot;,&quot;prev&quot;), actionButton(&quot;page_23&quot;,&quot;next&quot;)), tabPanel(&quot;page_3&quot;,&quot;You&#39;re done!&quot;, actionButton(&quot;page_32&quot;,&quot;prev&quot;)) ) ) server &lt;- function(input, output, session) { switch_page&lt;-function(i){ updateTabsetPanel(inputId=&quot;wizard&quot;,selected=paste0(&quot;page_&quot;,i)) } observeEvent(input$page_12,switch_page(2)) observeEvent(input$page_21,switch_page(1)) observeEvent(input$page_23,switch_page(3)) observeEvent(input$page_32,switch_page(2)) } 6.3 Creating UI with code library(shiny) ui &lt;- fluidPage( textInput(&quot;label&quot;,&quot;label&quot;), selectInput(&quot;type&quot;,&quot;type&quot;,c(&quot;slider&quot;,&quot;numeric&quot;)), uiOutput(&quot;numeric&quot;) ) server &lt;- function(input, output, session) { output$numeric&lt;-renderUI({ #value&lt;-isolate(input$dynamic) if(input$type==&quot;slider&quot;){ sliderInput(&quot;dynamic&quot;,input$label,value=0,min=0,max=10) }else{ numericInput(&quot;dynamic&quot;,input$label,value=0,min=0,max=10) } }) } library(purrr) library(shiny) ui &lt;- fluidPage( numericInput(&quot;n&quot;, &quot;Number of colours&quot;, value = 5, min = 1), uiOutput(&quot;col&quot;), textOutput(&quot;palette&quot;) ) server &lt;- function(input, output, session) { col_names &lt;- reactive(paste0(&quot;col&quot;, seq_len(input$n))) output$col &lt;- renderUI({ map(col_names(), ~ textInput(.x, NULL)) }) output$palette &lt;- renderText({ map_chr(col_names(), ~ input[[.x]] %||% &quot;&quot;) }) } library(shiny) ui &lt;- fluidPage( sidebarLayout( sidebarPanel( numericInput(&quot;n&quot;, &quot;Number of colours&quot;, value = 5, min = 1), uiOutput(&quot;col&quot;), ), mainPanel( plotOutput(&quot;plot&quot;) ) ) ) server &lt;- function(input, output, session) { col_names &lt;- reactive(paste0(&quot;col&quot;, seq_len(input$n))) output$col &lt;- renderUI({ map(col_names(), ~ textInput(.x, NULL, value = isolate(input[[.x]]))) }) output$plot &lt;- renderPlot({ cols &lt;- map_chr(col_names(), ~ input[[.x]] %||% &quot;&quot;) # convert empty inputs to transparent cols[cols == &quot;&quot;] &lt;- NA barplot( rep(1, length(cols)), col = cols, space = 0, axes = FALSE ) }, res = 96) } "],["shiny-bookmarking.html", "Chapter 7 Shiny Bookmarking 7.1 Basic 7.2 Storing richer state", " Chapter 7 Shiny Bookmarking 7.1 Basic library(shiny) ui &lt;- fluidPage( sidebarLayout( sidebarPanel( sliderInput(&quot;omega&quot;, &quot;omega&quot;, value = 1, min = -2, max = 2, step = 0.01), sliderInput(&quot;delta&quot;, &quot;delta&quot;, value = 1, min = 0, max = 2, step = 0.01), sliderInput(&quot;damping&quot;, &quot;damping&quot;, value = 1, min = 0.9, max = 1, step = 0.001), numericInput(&quot;length&quot;, &quot;length&quot;, value = 100) ), mainPanel( plotOutput(&quot;fig&quot;) ) ) ) server &lt;- function(input, output, session) { t &lt;- reactive(seq(0, input$length, length.out = input$length * 100)) x &lt;- reactive(sin(input$omega * t() + input$delta) * input$damping ^ t()) y &lt;- reactive(sin(t()) * input$damping ^ t()) output$fig&lt;-renderPlot({ plot(x(), y(), axes = FALSE, xlab = &quot;&quot;, ylab = &quot;&quot;, type = &quot;l&quot;, lwd = 2) }, res = 96 ) } 我们需要做三件事来使这个应用程序可书签化: 1.向用户界面添加书签按钮bookmarkButton()。这将生成一个按钮，用户单击该按钮可以生成可书签的网址。 2.将ui转换成函数function。 3.将enableBookmarking = “url”添加到shinyApp()调用中。 library(shiny) ui &lt;- function(request){ fluidPage( sidebarLayout( sidebarPanel( sliderInput(&quot;omega&quot;, &quot;omega&quot;, value = 1, min = -2, max = 2, step = 0.01), sliderInput(&quot;delta&quot;, &quot;delta&quot;, value = 1, min = 0, max = 2, step = 0.01), sliderInput(&quot;damping&quot;, &quot;damping&quot;, value = 1, min = 0.9, max = 1, step = 0.001), numericInput(&quot;length&quot;, &quot;length&quot;, value = 100), bookmarkButton() ), mainPanel( plotOutput(&quot;fig&quot;) ) ) ) } #shinyApp(ui, server,enableBookmarking = &quot;url &quot;) 自动更新网址需要服务器函数中的一些样板: # # Automatically bookmark every time an input changes # observe({ # reactiveValuesToList(input) # session$doBookmark() # }) # # Update the query string # onBookmarked(updateQueryString) 它为我们提供了如下更新的服务器功能: server &lt;- function(input, output, session) { t &lt;- reactive(seq(0, input$length, length = input$length * 100)) x &lt;- reactive(sin(input$omega * t() + input$delta) * input$damping ^ t()) y &lt;- reactive(sin(t()) * input$damping ^ t()) output$fig &lt;- renderPlot({ plot(x(), y(), axes = FALSE, xlab = &quot;&quot;, ylab = &quot;&quot;, type = &quot;l&quot;, lwd = 2) }, res = 96) observe({ reactiveValuesToList(input) session$doBookmark() }) onBookmarked(updateQueryString) } 添加bookmark书签完整代码： library(shiny) ui &lt;- function(request){ fluidPage( sidebarLayout( sidebarPanel( sliderInput(&quot;omega&quot;, &quot;omega&quot;, value = 1, min = -2, max = 2, step = 0.01), sliderInput(&quot;delta&quot;, &quot;delta&quot;, value = 1, min = 0, max = 2, step = 0.01), sliderInput(&quot;damping&quot;, &quot;damping&quot;, value = 1, min = 0.9, max = 1, step = 0.001), numericInput(&quot;length&quot;, &quot;length&quot;, value = 100), bookmarkButton() ), mainPanel( plotOutput(&quot;fig&quot;) ) ) ) } server &lt;- function(input, output, session) { t &lt;- reactive(seq(0, input$length, length = input$length * 100)) x &lt;- reactive(sin(input$omega * t() + input$delta) * input$damping ^ t()) y &lt;- reactive(sin(t()) * input$damping ^ t()) output$fig &lt;- renderPlot({ plot(x(), y(), axes = FALSE, xlab = &quot;&quot;, ylab = &quot;&quot;, type = &quot;l&quot;, lwd = 2) }, res = 96) observe({ reactiveValuesToList(input) session$doBookmark() }) onBookmarked(updateQueryString) } 7.2 Storing richer state 使用enableBookmarking=“server”，它将状态保存到server上的rds文件。这总是会生成一个简短、不透明的URL，但需要服务器上的额外存储。 #shinyApp(ui, server, enableBookmarking = &quot;server&quot;) "],["covid-19-data.html", "Chapter 8 COVID-19 data 8.1 US data 8.2 Global data", " Chapter 8 COVID-19 data 8.1 US data 该部分主要处理美国US新冠数据的死亡和确诊数据，得到美国各个地区死亡总人数和近28天的死亡人数以及确诊总人数和近28天的确认总人数，数据进行结合，最后利用reactable函数进行可视化。 8.1.1 Load libraries library(data.table) ## ## Attaching package: &#39;data.table&#39; ## The following object is masked from &#39;package:purrr&#39;: ## ## transpose library(reactable) library(tidyverse) ## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── ## ✓ tibble 3.1.6 ✓ dplyr 1.0.7 ## ✓ tidyr 1.1.4 ✓ stringr 1.4.0 ## ✓ readr 2.1.0 ✓ forcats 0.5.1 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## x dplyr::between() masks data.table::between() ## x dplyr::filter() masks stats::filter() ## x dplyr::first() masks data.table::first() ## x dplyr::lag() masks stats::lag() ## x dplyr::last() masks data.table::last() ## x data.table::transpose() masks purrr::transpose() 8.1.2 Load data and Processing data confirmed_US &lt;- tibble(fread(&quot;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv&quot;)) confirmed_US ## # A tibble: 3,342 × 707 ## UID iso2 iso3 code3 FIPS Admin2 Province_State Country_Region Lat ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 84001001 US USA 840 1001 Autauga Alabama US 32.5 ## 2 84001003 US USA 840 1003 Baldwin Alabama US 30.7 ## 3 84001005 US USA 840 1005 Barbour Alabama US 31.9 ## 4 84001007 US USA 840 1007 Bibb Alabama US 33.0 ## 5 84001009 US USA 840 1009 Blount Alabama US 34.0 ## 6 84001011 US USA 840 1011 Bullock Alabama US 32.1 ## 7 84001013 US USA 840 1013 Butler Alabama US 31.8 ## 8 84001015 US USA 840 1015 Calhoun Alabama US 33.8 ## 9 84001017 US USA 840 1017 Chambers Alabama US 32.9 ## 10 84001019 US USA 840 1019 Cherokee Alabama US 34.2 ## # … with 3,332 more rows, and 698 more variables: Long_ &lt;dbl&gt;, ## # Combined_Key &lt;chr&gt;, 1/22/20 &lt;int&gt;, 1/23/20 &lt;int&gt;, 1/24/20 &lt;int&gt;, ## # 1/25/20 &lt;int&gt;, 1/26/20 &lt;int&gt;, 1/27/20 &lt;int&gt;, 1/28/20 &lt;int&gt;, 1/29/20 &lt;int&gt;, ## # 1/30/20 &lt;int&gt;, 1/31/20 &lt;int&gt;, 2/1/20 &lt;int&gt;, 2/2/20 &lt;int&gt;, 2/3/20 &lt;int&gt;, ## # 2/4/20 &lt;int&gt;, 2/5/20 &lt;int&gt;, 2/6/20 &lt;int&gt;, 2/7/20 &lt;int&gt;, 2/8/20 &lt;int&gt;, ## # 2/9/20 &lt;int&gt;, 2/10/20 &lt;int&gt;, 2/11/20 &lt;int&gt;, 2/12/20 &lt;int&gt;, 2/13/20 &lt;int&gt;, ## # 2/14/20 &lt;int&gt;, 2/15/20 &lt;int&gt;, 2/16/20 &lt;int&gt;, 2/17/20 &lt;int&gt;, … deaths_US &lt;- tibble(fread(&quot;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_US.csv&quot;)) deaths_US ## # A tibble: 3,342 × 708 ## UID iso2 iso3 code3 FIPS Admin2 Province_State Country_Region Lat ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 84001001 US USA 840 1001 Autauga Alabama US 32.5 ## 2 84001003 US USA 840 1003 Baldwin Alabama US 30.7 ## 3 84001005 US USA 840 1005 Barbour Alabama US 31.9 ## 4 84001007 US USA 840 1007 Bibb Alabama US 33.0 ## 5 84001009 US USA 840 1009 Blount Alabama US 34.0 ## 6 84001011 US USA 840 1011 Bullock Alabama US 32.1 ## 7 84001013 US USA 840 1013 Butler Alabama US 31.8 ## 8 84001015 US USA 840 1015 Calhoun Alabama US 33.8 ## 9 84001017 US USA 840 1017 Chambers Alabama US 32.9 ## 10 84001019 US USA 840 1019 Cherokee Alabama US 34.2 ## # … with 3,332 more rows, and 699 more variables: Long_ &lt;dbl&gt;, ## # Combined_Key &lt;chr&gt;, Population &lt;int&gt;, 1/22/20 &lt;int&gt;, 1/23/20 &lt;int&gt;, ## # 1/24/20 &lt;int&gt;, 1/25/20 &lt;int&gt;, 1/26/20 &lt;int&gt;, 1/27/20 &lt;int&gt;, 1/28/20 &lt;int&gt;, ## # 1/29/20 &lt;int&gt;, 1/30/20 &lt;int&gt;, 1/31/20 &lt;int&gt;, 2/1/20 &lt;int&gt;, 2/2/20 &lt;int&gt;, ## # 2/3/20 &lt;int&gt;, 2/4/20 &lt;int&gt;, 2/5/20 &lt;int&gt;, 2/6/20 &lt;int&gt;, 2/7/20 &lt;int&gt;, ## # 2/8/20 &lt;int&gt;, 2/9/20 &lt;int&gt;, 2/10/20 &lt;int&gt;, 2/11/20 &lt;int&gt;, 2/12/20 &lt;int&gt;, ## # 2/13/20 &lt;int&gt;, 2/14/20 &lt;int&gt;, 2/15/20 &lt;int&gt;, 2/16/20 &lt;int&gt;, … p &lt;- ncol(confirmed_US) confirmed &lt;- confirmed_US[, c(11, p - 28, p)] colnames(confirmed) &lt;- c(&quot;us_county&quot;, &quot;total_cases_28&quot;, &quot;total_cases&quot;) confirmed2 &lt;- confirmed %&gt;% mutate(new_cases_28 = total_cases - total_cases_28) %&gt;% select(-total_cases_28) confirmed2 ## # A tibble: 3,342 × 3 ## us_county total_cases new_cases_28 ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; ## 1 Autauga, Alabama, US 10661 204 ## 2 Baldwin, Alabama, US 38457 498 ## 3 Barbour, Alabama, US 3722 62 ## 4 Bibb, Alabama, US 4393 60 ## 5 Blount, Alabama, US 10941 320 ## 6 Bullock, Alabama, US 1540 16 ## 7 Butler, Alabama, US 3487 78 ## 8 Calhoun, Alabama, US 22772 250 ## 9 Chambers, Alabama, US 5856 61 ## 10 Cherokee, Alabama, US 3259 126 ## # … with 3,332 more rows q &lt;- ncol(deaths_US) deaths &lt;- deaths_US[, c(11:12, q - 28, q)] colnames(deaths) &lt;- c(&quot;us_county&quot;, &quot;population&quot;, &quot;total_deaths_28&quot;, &quot;total_deaths&quot;) deaths2 &lt;- deaths %&gt;% mutate(new_deaths_28 = total_deaths - total_deaths_28) %&gt;% select(-total_deaths_28) deaths2 ## # A tibble: 3,342 × 4 ## us_county population total_deaths new_deaths_28 ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 Autauga, Alabama, US 55869 159 3 ## 2 Baldwin, Alabama, US 223234 592 6 ## 3 Barbour, Alabama, US 24686 81 2 ## 4 Bibb, Alabama, US 22394 95 2 ## 5 Blount, Alabama, US 57826 194 4 ## 6 Bullock, Alabama, US 10101 46 1 ## 7 Butler, Alabama, US 19448 102 2 ## 8 Calhoun, Alabama, US 113605 525 7 ## 9 Chambers, Alabama, US 33254 143 1 ## 10 Cherokee, Alabama, US 26196 64 2 ## # … with 3,332 more rows 8.1.3 Combine data full_data &lt;- full_join(confirmed2, deaths2) %&gt;% mutate( incidence = round(total_cases / population * 1e5, digits = 2), case_fatality_ratio = round(total_deaths / total_cases * 100, digits = 2) ) ## Joining, by = &quot;us_county&quot; full_data ## # A tibble: 3,342 × 8 ## us_county total_cases new_cases_28 population total_deaths new_deaths_28 ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 Autauga, Alab… 10661 204 55869 159 3 ## 2 Baldwin, Alab… 38457 498 223234 592 6 ## 3 Barbour, Alab… 3722 62 24686 81 2 ## 4 Bibb, Alabama… 4393 60 22394 95 2 ## 5 Blount, Alaba… 10941 320 57826 194 4 ## 6 Bullock, Alab… 1540 16 10101 46 1 ## 7 Butler, Alaba… 3487 78 19448 102 2 ## 8 Calhoun, Alab… 22772 250 113605 525 7 ## 9 Chambers, Ala… 5856 61 33254 143 1 ## 10 Cherokee, Ala… 3259 126 26196 64 2 ## # … with 3,332 more rows, and 2 more variables: incidence &lt;dbl&gt;, ## # case_fatality_ratio &lt;dbl&gt; reactable(data = full_data, searchable = TRUE, striped = TRUE, highlight = TRUE, width = &quot;auto&quot;, height = &quot;auto&quot;) 8.2 Global data 这里面主要做了全球COVID-19数据的处理，其中利用dplyr包中的长宽数据转换函数pivot_longer()或者pivot_wider()，其中pivot_longer()将宽数据转化为长数据，pivot_wider()将长数据转化为宽数据。 此外，这里面主要利用COVID-19全球数据制作周维度全球确诊数据和日维度全球死亡数据，以便进行时间序列展示，方便接下来的时间序列图以及shiny地图的制作。 8.2.1 周维度全球确诊数据 url &lt;- &quot;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv&quot; confirmed_global &lt;- data.table::fread(url) %&gt;% tibble::tibble() # readr::read_csv(url) # utils::read.csv(url) nc &lt;- ncol(confirmed_global) M &lt;- confirmed_global[, seq(9, nc, 7)] M2 &lt;- cbind(M[, 1], M[, -1] - M[, -ncol(M)]) new_cases_global_weekly &lt;- cbind( confirmed_global[, 2:1], M2[, rev(colnames(M2))] ) %&gt;% tibble() confirmed_global_weekly &lt;- new_cases_global_weekly %&gt;% # 导入全球数据 filter(`Province/State` == &quot;&quot;) %&gt;% # 筛选行 select(!`Province/State`) %&gt;% # 筛选列 pivot_longer(!`Country/Region`, names_to = &quot;Date&quot;, values_to = &quot;Confirmed&quot;) %&gt;% # wide to long rename(Country_Region = `Country/Region`) %&gt;% # 左新右旧 mutate(Date = lubridate::mdy(Date)) %&gt;% # mutate 替换成 YMD arrange(Country_Region, Date) # 时间排序从小到大（-Date从大到小） confirmed_global_weekly ## # A tibble: 19,107 × 3 ## Country_Region Date Confirmed ## &lt;chr&gt; &lt;date&gt; &lt;int&gt; ## 1 Afghanistan 2020-01-26 0 ## 2 Afghanistan 2020-02-02 0 ## 3 Afghanistan 2020-02-09 0 ## 4 Afghanistan 2020-02-16 0 ## 5 Afghanistan 2020-02-23 0 ## 6 Afghanistan 2020-03-01 5 ## 7 Afghanistan 2020-03-08 3 ## 8 Afghanistan 2020-03-15 12 ## 9 Afghanistan 2020-03-22 14 ## 10 Afghanistan 2020-03-29 80 ## # … with 19,097 more rows 8.2.2 日维度全球死亡数据 url &lt;- &quot;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv&quot; death_global&lt;- data.table::fread(url) %&gt;% tibble::tibble() death_global_daily &lt;- death_global %&gt;% pivot_longer( cols = 5:ncol(.), names_to = &quot;date&quot;, values_to = &quot;cases&quot; ) %&gt;% mutate(date = lubridate::mdy(date)) %&gt;% janitor::clean_names() %&gt;% group_by(country_region, date) %&gt;% summarise(cases = sum(cases),.groups = &quot;drop&quot;) %&gt;% ungroup() death_global_daily ## # A tibble: 136,416 × 3 ## country_region date cases ## &lt;chr&gt; &lt;date&gt; &lt;int&gt; ## 1 Afghanistan 2020-01-22 0 ## 2 Afghanistan 2020-01-23 0 ## 3 Afghanistan 2020-01-24 0 ## 4 Afghanistan 2020-01-25 0 ## 5 Afghanistan 2020-01-26 0 ## 6 Afghanistan 2020-01-27 0 ## 7 Afghanistan 2020-01-28 0 ## 8 Afghanistan 2020-01-29 0 ## 9 Afghanistan 2020-01-30 0 ## 10 Afghanistan 2020-01-31 0 ## # … with 136,406 more rows "],["plots-and-maps.html", "Chapter 9 Plots and Maps 9.1 Plots 9.2 Maps", " Chapter 9 Plots and Maps 9.1 Plots 利用全球COVID-19数据进行时间序列作图，分别进行全球全球周维度确诊数据以及全球日维度死亡数据的时间序列可视化作图。 全球周维度确诊数据制作时间序列图如下所示： library(data.table) library(reactable) library(tidyverse) url &lt;- &quot;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv&quot; confirmed_global &lt;- data.table::fread(url) %&gt;% tibble::tibble() # readr::read_csv(url) # utils::read.csv(url) nc &lt;- ncol(confirmed_global) M &lt;- confirmed_global[, seq(9, nc, 7)] M2 &lt;- cbind(M[, 1], M[, -1] - M[, -ncol(M)]) new_cases_global_weekly &lt;- cbind( confirmed_global[, 2:1], M2[, rev(colnames(M2))] ) %&gt;% tibble() confirmed_global_weekly &lt;- new_cases_global_weekly %&gt;% # 导入全球数据 filter(`Province/State` == &quot;&quot;) %&gt;% # 筛选行 select(!`Province/State`) %&gt;% # 筛选列 pivot_longer(!`Country/Region`, names_to = &quot;Date&quot;, values_to = &quot;Confirmed&quot;) %&gt;% # wide to long rename(Country_Region = `Country/Region`) %&gt;% # 左新右旧 mutate(Date = lubridate::mdy(Date)) %&gt;% # mutate 替换成 YMD arrange(Country_Region, Date) # 时间排序从小到大（-Date从大到小） confirmed_global_weekly&lt;-confirmed_global_weekly %&gt;% group_by(Date) %&gt;% summarise(Confirmed = sum(Confirmed)) p &lt;- ggplot(confirmed_global_weekly, aes(x = Date, y = Confirmed)) + geom_point() + scale_x_date( date_labels = &quot;%m-%d&quot;, date_breaks = &quot;1 week&quot;) + scale_y_continuous( breaks = c(0, 50000, 100000, 200000, 300000, 500000, 900000), labels = scales::comma)+ geom_line() + geom_bar(stat = &quot;identity&quot;, colour = &quot;white&quot;, fill = &quot;blue&quot;) + theme_bw()+xlab(&quot;date&quot;)+ylab(&quot;confirmed&quot;) p p1 &lt;- ggplot(confirmed_global_weekly, aes(x = Date, y = Confirmed)) + geom_point() + # scale_x_date( # date_labels = &quot;%m-%d&quot;, # date_breaks = &quot;1 week&quot;) + # scale_y_continuous( # breaks = c(0, 50000, 100000, 200000, 300000, 500000, 900000), # labels = scales::comma)+ geom_line() + geom_bar(stat = &quot;identity&quot;, colour = &quot;white&quot;, fill = &quot;blue&quot;) + theme_bw()+xlab(&quot;date&quot;)+ylab(&quot;confirmed&quot;) p1 全球日维度死亡数据中筛选中国，查看中国的新冠日维度死亡人数趋势： url &lt;- &quot;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv&quot; death_global&lt;- data.table::fread(url) %&gt;% tibble::tibble() death_global_daily &lt;- death_global %&gt;% pivot_longer( cols = 5:ncol(.), names_to = &quot;date&quot;, values_to = &quot;cases&quot; ) %&gt;% mutate(date = lubridate::mdy(date)) %&gt;% janitor::clean_names() %&gt;% group_by(country_region, date) %&gt;% summarise(cases = sum(cases),.groups = &quot;drop&quot;) %&gt;% ungroup() death_China_daily&lt;-death_global_daily %&gt;% filter(country_region == &quot;China&quot;) %&gt;% ggplot(aes(x = date, y = cases)) + geom_point() + # scale_x_date(date_breaks = &quot;1 week&quot;, date_labels = &quot;%m-%d&quot;) + scale_y_log10(labels = scales::comma) death_China_daily death200000&lt;-death_global_daily %&gt;% group_by(country_region) %&gt;% filter(max(cases) &gt;= 200000) %&gt;% ungroup() %&gt;% ggplot(aes(x = date, y = cases, color = country_region)) + geom_point() + # scale_x_date(date_breaks = &quot;1 week&quot;, date_labels = &quot;%m-%d&quot;) + # scale_y_log10() + facet_wrap(vars(country_region), ncol = 2) + theme( axis.text.x = element_text(angle = 45, hjust = 1) ) + theme(legend.position = &quot;none&quot;) death200000 9.2 Maps 参考https://plotly.com/r/maps/进行地图的绘制。 9.2.1 使用Maps包绘制地图 利用ggplot进行地图绘制 #全球死亡数据 deaths_global &lt;- tibble(fread(&quot;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv&quot;)) #处理数据 p &lt;- ncol(deaths_global) death&lt;-deaths_global[, c(2:4, p - 14, p)] colnames(death) &lt;- c(&quot;country&quot;,&quot;lat&quot;,&quot;long&quot;, &quot;total_death_14&quot;, &quot;total_death&quot;) death_global &lt;- death %&gt;% mutate(new_death_14 = total_death - total_death_14) %&gt;% select(-total_death_14) world &lt;- map_data(&quot;world&quot;) ggplot() + geom_polygon( data = world, aes(x = long, y = lat, group = group), fill = &quot;grey&quot;, alpha = 0.3 ) + geom_point( data = death_global, aes(x = long, y = lat, size = new_death_14, color = new_death_14), stroke = F, alpha = 0.7 ) + scale_size_continuous( name = &quot;Cases&quot;, trans = &quot;log&quot;, range = c(1, 7), breaks = c(1, 20, 100, 1000, 50000), labels = c(&quot;1-19&quot;, &quot;20-99&quot;, &quot;100-999&quot;, &quot;1,000-49,999&quot;, &quot;50,000+&quot;) ) + scale_color_viridis_c( option = &quot;inferno&quot;, name = &quot;Cases&quot;, trans = &quot;log&quot;, breaks = c(1, 20, 100, 1000, 50000), labels = c(&quot;1-19&quot;, &quot;20-99&quot;, &quot;100-999&quot;, &quot;1,000-49,999&quot;, &quot;50,000+&quot;) ) + theme_void() + guides(colour = guide_legend()) + labs( title = &quot;Mapping the global new_death_14&quot;, subtitle = &quot;&quot;, caption = &quot;Source: JHU Unviersity, CSSE; FT research @www.FT.com&quot; ) + theme( legend.position = &quot;bottom&quot;, text = element_text(color = &quot;#22211d&quot;), plot.background = element_rect(fill = &quot;#ffffff&quot;, color = NA), panel.background = element_rect(fill = &quot;#ffffff&quot;, color = NA), legend.background = element_rect(fill = &quot;#ffffff&quot;, color = NA) ) 9.2.2 plotly绘制地图 9.2.2.1 首先绘制全球数据 除了直接使用地图数据及ggplot之外，还可以用plotly绘制世界地图： library(plotly) ## ## Attaching package: &#39;plotly&#39; ## The following object is masked from &#39;package:ggplot2&#39;: ## ## last_plot ## The following object is masked from &#39;package:stats&#39;: ## ## filter ## The following object is masked from &#39;package:graphics&#39;: ## ## layout #全球死亡数据 deaths_global &lt;- tibble(fread(&quot;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv&quot;)) p &lt;- ncol(deaths_global) death&lt;- deaths_global [, c(1:4,p-14, p)] colnames(death) &lt;- c(&quot;province&quot;, &quot;country&quot;,&quot;Lat&quot;,&quot;Long&quot;, &quot;total_death_14&quot;, &quot;total_death&quot;) death_global &lt;- death %&gt;% mutate(new_death_14 = total_death - total_death_14) %&gt;% select(-total_death_14) g &lt;- list( scope = &quot;global&quot;, showland = TRUE, landcolor = toRGB(&quot;gray85&quot;), subunitwidth = 1, countrywidth = 1, subunitcolor = toRGB(&quot;white&quot;), countrycolor = toRGB(&quot;white&quot;) ) fig &lt;- plot_geo(death_global, sizes = c(1, 250)) %&gt;% add_markers( x = ~Long, y = ~Lat, size = ~total_death, color = ~total_death, hoverinfo = &quot;text&quot;, text = ~ paste( death_global$province, &quot; &quot;, death_global$country, &quot;&lt;br /&gt;&quot;, &quot;deaths&quot;, death_global$total_death ),colors = &#39;Purples&#39; ) %&gt;% layout(title = &quot;Global total death&quot;, geo = g) fig library(plotly) # specify map projection/options g &lt;- list( showframe = FALSE, showcoastlines = FALSE, projection = list(type = &#39;Mercator&#39;), scope = &quot;global&quot;, showland = TRUE, landcolor = toRGB(&quot;gray85&quot;), subunitwidth = 1, countrywidth = 1, subunitcolor = toRGB(&quot;white&quot;), countrycolor = toRGB(&quot;white&quot;) ) fig &lt;- plot_geo(death_global) fig &lt;- fig %&gt;% add_trace( x = ~Long, y = ~Lat, size = ~new_death_14, color = ~new_death_14, hoverinfo = &quot;text&quot;, text = ~paste( death_global$province, &quot; &quot;, death_global$country, &quot;&lt;br /&gt;&quot;, &quot;deaths&quot;, death_global$new_death_14 ) ) fig &lt;- fig %&gt;% colorbar(title = &#39;人数&#39;) ## No scattergeo mode specifed: ## Setting the mode to markers ## Read more about this attribute -&gt; https://plotly.com/r/reference/#scatter-mode fig &lt;- fig %&gt;% layout( title = &#39;全球近14天新增死亡人数 Source:&lt;a href=&quot;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv&quot;&gt;Global total death&lt;/a&gt;&#39;, geo = g ) fig 9.2.2.2 绘制美国地图数据 基于前一章节的数据，此处进行美国新冠数据的处理，得到美国各个州的确诊以及死亡人数，从而计算死亡率，得到死亡率。 confirmed_US &lt;- tibble(fread(&quot;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv&quot;)) deaths_US &lt;- tibble(fread(&quot;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_US.csv&quot;)) p &lt;- ncol(confirmed_US) confirmed &lt;- confirmed_US[, c(6:7,9:10, nc)] colnames(confirmed) &lt;- c(&quot;state&quot;, &quot;province&quot;, &quot;Lat&quot;,&quot;Long&quot;, &quot;total_cases&quot;) confirmed ## # A tibble: 3,342 × 5 ## state province Lat Long total_cases ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 Autauga Alabama 32.5 -86.6 10589 ## 2 Baldwin Alabama 30.7 -87.7 38278 ## 3 Barbour Alabama 31.9 -85.4 3714 ## 4 Bibb Alabama 33.0 -87.1 4378 ## 5 Blount Alabama 34.0 -86.6 10840 ## 6 Bullock Alabama 32.1 -85.7 1537 ## 7 Butler Alabama 31.8 -86.7 3467 ## 8 Calhoun Alabama 33.8 -85.8 22682 ## 9 Chambers Alabama 32.9 -85.4 5825 ## 10 Cherokee Alabama 34.2 -85.6 3226 ## # … with 3,332 more rows q &lt;- ncol(deaths_US) deaths &lt;- deaths_US[, c(6:7,9:10, nc)] colnames(deaths) &lt;- c(&quot;state&quot;, &quot;province&quot;, &quot;Lat&quot;,&quot;Long&quot;, &quot;total_deaths&quot;) deaths ## # A tibble: 3,342 × 5 ## state province Lat Long total_deaths ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 Autauga Alabama 32.5 -86.6 157 ## 2 Baldwin Alabama 30.7 -87.7 590 ## 3 Barbour Alabama 31.9 -85.4 80 ## 4 Bibb Alabama 33.0 -87.1 95 ## 5 Blount Alabama 34.0 -86.6 193 ## 6 Bullock Alabama 32.1 -85.7 45 ## 7 Butler Alabama 31.8 -86.7 101 ## 8 Calhoun Alabama 33.8 -85.8 520 ## 9 Chambers Alabama 32.9 -85.4 143 ## 10 Cherokee Alabama 34.2 -85.6 64 ## # … with 3,332 more rows full_data &lt;- full_join(confirmed, deaths) %&gt;% mutate( rate = round(total_deaths/total_cases , digits = 5) ) ## Joining, by = c(&quot;state&quot;, &quot;province&quot;, &quot;Lat&quot;, &quot;Long&quot;) full_data ## # A tibble: 3,647 × 7 ## state province Lat Long total_cases total_deaths rate ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Autauga Alabama 32.5 -86.6 10589 157 0.0148 ## 2 Baldwin Alabama 30.7 -87.7 38278 590 0.0154 ## 3 Barbour Alabama 31.9 -85.4 3714 80 0.0215 ## 4 Bibb Alabama 33.0 -87.1 4378 95 0.0217 ## 5 Blount Alabama 34.0 -86.6 10840 193 0.0178 ## 6 Bullock Alabama 32.1 -85.7 1537 45 0.0293 ## 7 Butler Alabama 31.8 -86.7 3467 101 0.0291 ## 8 Calhoun Alabama 33.8 -85.8 22682 520 0.0229 ## 9 Chambers Alabama 32.9 -85.4 5825 143 0.0246 ## 10 Cherokee Alabama 34.2 -85.6 3226 64 0.0198 ## # … with 3,637 more rows library(plotly) full_data$class &lt;- cut(full_data$rate, breaks = c(0.01, 0.02, 0.03, 0.04,0.05), labels = c(&quot;低&quot;, &quot;中低&quot;, &quot;中&quot;, &quot;偏高&quot;), ordered_result = T) g &lt;- list( scope = &quot;usa&quot;, projection = list(type = &quot;albers usa&quot;), showland = TRUE, landcolor = toRGB(&quot;gray85&quot;), subunitwidth = 1, countrywidth = 1, subunitcolor = toRGB(&quot;white&quot;), countrycolor = toRGB(&quot;white&quot;) ) fig &lt;- plot_geo(full_data, locationmode = &quot;USA&quot;, sizes = c(1, 250)) %&gt;% add_markers( x = ~Long, y = ~Lat, size = ~rate, color = ~class, hoverinfo = &quot;text&quot;, text = ~ paste( full_data$state, &quot; &quot;, full_data$province, &quot;&lt;br /&gt;&quot;, &quot;death rate &quot;, full_data$rate ) ) %&gt;% layout(title = &quot;US death rate&quot;, geo = g) fig ## Warning: `line.width` does not currently support multiple values. ## Warning: `line.width` does not currently support multiple values. ## Warning: `line.width` does not currently support multiple values. ## Warning: `line.width` does not currently support multiple values. 9.2.3 leaflet绘制地图 leaflet也是绘制地图的一个有利的工具： library(leaflet) deaths_global &lt;- tibble(fread(&quot;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv&quot;)) #处理数据 p &lt;- ncol(deaths_global) death&lt;-deaths_global[, c(2:4, p - 14, p)] colnames(death) &lt;- c(&quot;country&quot;,&quot;lat&quot;,&quot;long&quot;, &quot;total_death_14&quot;, &quot;total_death&quot;) death_global &lt;- death %&gt;% mutate(new_death_14 = total_death - total_death_14) %&gt;% select(-total_death_14) leaflet(death_global) %&gt;% addProviderTiles(providers$Stamen.TonerLite) %&gt;% addMarkers(lat=~lat,lng=~long,popup=~as.character(new_death_14)) "],["shiny-练习.html", "Chapter 10 shiny 练习 10.1 shiny时间序列交互 10.2 shiny交互式地图", " Chapter 10 shiny 练习 10.1 shiny时间序列交互 导入数据以及处理数据： #导入包 library(data.table) library(reactable) library(tidyverse) library(dplyr) library(shiny) library(shinydashboard) ## ## Attaching package: &#39;shinydashboard&#39; ## The following object is masked from &#39;package:graphics&#39;: ## ## box #死亡数据 deaths_US &lt;- tibble(fread(&quot;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_US.csv&quot;)) # #处理数据 p &lt;- ncol(deaths_US) death&lt;- deaths_US[, c(7,11:12, p - 14, p)] colnames(death) &lt;- c(&quot;province&quot;,&quot;Combined_Key&quot;,&quot;population&quot;, &quot;total_death_14&quot;, &quot;total_death&quot;) death1 &lt;- death %&gt;% mutate(new_death_14 = total_death - total_death_14) %&gt;% select(-total_death_14) #周维度全球确诊数据 url &lt;- &quot;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv&quot; confirmed_global &lt;- data.table::fread(url) %&gt;% tibble::tibble() # readr::read_csv(url) # utils::read.csv(url) #处理数据 nc &lt;- ncol(confirmed_global) M &lt;- confirmed_global[, seq(9, nc, 7)] M2 &lt;- cbind(M[, 1], M[, -1] - M[, -ncol(M)]) new_cases_global_weekly &lt;- cbind( confirmed_global[, 2:1], M2[, rev(colnames(M2))] ) %&gt;% tibble() covid19_global &lt;- new_cases_global_weekly %&gt;% # 导入全球数据 filter(`Province/State` == &quot;&quot;) %&gt;% # 筛选行 select(!`Province/State`) %&gt;% # 筛选列 pivot_longer(!`Country/Region`, names_to = &quot;Date&quot;, values_to = &quot;Confirmed&quot;) %&gt;% # wide to long rename(Country_Region = `Country/Region`) %&gt;% # 左新右旧 mutate(Date = lubridate::mdy(Date)) %&gt;% # mutate 替换成 YMD arrange(Country_Region, Date) #日维度全球死亡数据 url &lt;- &quot;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv&quot; d&lt;- data.table::fread(url) %&gt;% tibble::tibble() d1 &lt;- d %&gt;% pivot_longer( cols = 5:ncol(.), names_to = &quot;date&quot;, values_to = &quot;cases&quot; ) %&gt;% mutate(date = lubridate::mdy(date)) %&gt;% janitor::clean_names() %&gt;% group_by(country_region, date) %&gt;% summarise(cases = sum(cases),.groups = &quot;drop&quot;) %&gt;% ungroup() 添加shiny交互UI部分： # Define UI for application that draws a histogram ui &lt;- dashboardPage( dashboardHeader(title = &quot;COVID-19_Shiny&quot;), dashboardSidebar( sidebarMenu( menuItem(&quot;周确诊趋势&quot;, tabName = &quot;周确诊趋势&quot;), menuItem(&quot;日死亡趋势&quot;, tabName = &quot;日死亡趋势&quot;), menuItem(&quot;table&quot;, tabName = &quot;table&quot;), menuItem(&quot;ggplot2&quot;, tabName = &quot;ggplot2&quot;), menuItem(&quot;Cluster&quot;, tabName = &quot;cluster&quot;) ) ), dashboardBody( tabItems( # First tab content tabItem(tabName = &quot;周确诊趋势&quot;, sidebarLayout( sidebarPanel( selectInput( inputId = &quot;admin0&quot;, label = &quot;国家&quot;, choices = covid19_global$Country_Region, selected = &quot;US&quot; ), dateRangeInput( inputId = &quot;daterange&quot;, label = &quot;时间范围&quot;, language = &quot;zh-CN&quot;, weekstart = 0, separator = &quot;to&quot;, min = min(covid19_global$Date), max = max(covid19_global$Date), start = min(covid19_global$Date), end = max(covid19_global$Date) ), width=4 ), mainPanel(dashboardBody( # Boxes need to be put in a row (or column) fluidRow( box( title = &quot;周新增确诊趋势&quot;, plotlyOutput(outputId = &quot;myggplot&quot;), width = 250 )) ) ))), tabItem(tabName = &quot;日死亡趋势&quot;, sidebarLayout( sidebarPanel( selectInput( inputId = &quot;admin1&quot;, label = &quot;国家&quot;, choices =d1$country_region, selected = &quot;US&quot; ), dateRangeInput( inputId = &quot;daterange1&quot;, label = &quot;时间范围&quot;, language = &quot;zh-CN&quot;, separator = &quot;to&quot;, min = min(d1$date), max = max(d1$date), start = min(d1$date), end = max(d1$date) ), width=4 ), mainPanel(dashboardBody( # Boxes need to be put in a row (or column) fluidRow( box( title = &quot;日新增死亡趋势&quot;, plotlyOutput(outputId = &quot;myggplot1&quot;), width = 250 )) ) ))), tabItem(tabName = &quot;table&quot;, sidebarLayout( sidebarPanel( sliderInput(&quot;number&quot;,&quot;number of data:&quot;, min=0,max=4000,value=10,animate=TRUE ) ), mainPanel(dataTableOutput(&quot;Data&quot;)) )), # Second tab content tabItem(tabName = &quot;ggplot2&quot;, sidebarLayout( sidebarPanel( selectInput(&quot;Position&quot;,&quot;The Type of Plot:&quot;, c(&quot;fill&quot;=&quot;fill&quot;, &quot;dodge&quot;=&quot;dodge&quot;, &quot;stack&quot;=&quot;stack&quot;) )), mainPanel(plotOutput(&quot;Plot&quot;)) )), #third tabItem(tabName = &quot;cluster&quot;, titlePanel(&quot;clustering&quot;), sidebarLayout( sidebarPanel( selectInput(&quot;xcol&quot;,&quot;x&quot;,names(deaths_US), selected=names(deaths_US[,629])), selectInput(&quot;ycol&quot;,&quot;y&quot;,names(deaths_US), selected=names(deaths_US[,630])), numericInput(&quot;clusters&quot;,&quot;count&quot;,3,min=0,max=5000) ), # Show a plot of the generated distribution mainPanel( plotOutput(&quot;distPlot&quot;) ) )) )) ) 添加shiny交互server部分： server &lt;- function(input, output) { #周新增确诊 mydata &lt;- reactive({ covid19_global %&gt;% filter(Country_Region == input$admin0) %&gt;% filter(Date &gt;= input$daterange[1]) %&gt;% filter(Date &lt;= input$daterange[2]) # select(-Country_Region) }) output$myggplot &lt;- renderPlotly({ p &lt;- ggplot(data = mydata(), aes(x = Date, y = Confirmed)) + # geom_point() + # geom_line() + geom_bar(stat = &quot;identity&quot;, colour = &quot;white&quot;, fill = &quot;blue&quot;) + theme_bw()+xlab(&quot;日期(周)&quot;)+ylab(&quot;确诊人数&quot;) ggplotly(p) }) #日新增死亡 mydata1 &lt;- reactive({ d1 %&gt;% filter(country_region == input$admin1) %&gt;% filter(date &gt;= input$daterange1[1]) %&gt;% filter(date &lt;= input$daterange1[2]) # select(-Country_Region) }) output$myggplot1 &lt;- renderPlotly({ p1 &lt;- ggplot(data = mydata1(), aes(x = date, y = cases)) + # geom_point() + # geom_line() + geom_bar(stat = &quot;identity&quot;, colour = &quot;white&quot;, fill = &quot;blue&quot;) + theme_bw()+xlab(&quot;日期(日)&quot;)+ylab(&quot;死亡人数&quot;) ggplotly(p1) }) set.seed(123) data=death1[sample(1:nrow(death1),1000,replace = F),] #table output$Data&lt;-renderDataTable({ data.table(head(data,input$number)) }) #ggplot output$Plot&lt;- renderPlot({ ggplot(data,aes(x=&quot;new_death_14&quot;,fill=data$province))+ geom_histogram(Position=input$Position,stat=&quot;count&quot;)+ ggtitle(&quot;histogram&quot;) #geom_bar(stat = &quot;count&quot;,Position=&quot;cut&quot;) }) #cluster selecteddata &lt;- reactive({ deaths_US[,c(input$xcol,input$ycol)] }) clusters &lt;- reactive({ kmeans(selecteddata(),input$clusters) }) output$distPlot &lt;- renderPlot({ par(mar=c(5.1,4.1,0,1)) plot(selecteddata(), col=clusters()$cluster, pch=20,cex=3) points(clusters()$centers,pch=4,cex=4,lwd=4) }) } 呈现的交互动态形势图如下： 注意：在这一部分目前还是有些问题没有解决的： 当运行以上shiny时，添加shinyAPP(ui=ui,server=server)，运行run APP，会发现网站出现的很缓慢，由于添加ui控件时，进行国家和日期的选择，其中choices=什么的问题需要进一步明确。 10.2 shiny交互式地图 在本例子中，结合shiny，利用plotly包绘制地图，从而显示出全球新冠疫情相关数据分布情况。 library(shiny) library(data.table) library(reactable) library(tidyverse) library(dplyr) library(shinydashboard) library(plotly) #日维度全球死亡数据 url &lt;- &quot;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv&quot; death&lt;- data.table::fread(url) %&gt;% tibble::tibble() death &lt;- death %&gt;% pivot_longer( cols = 5:ncol(.), names_to = &quot;date&quot;, values_to = &quot;cases&quot; ) %&gt;% mutate(date = lubridate::mdy(date)) %&gt;% janitor::clean_names() ui &lt;- fluidPage( titlePanel(&quot;全球新冠death数据&quot;), sidebarPanel(width = 6, selectInput( inputId = &quot;date&quot;, label = &quot;选择日期&quot;, choices = death$date, selected = &quot;2021-05-23&quot;)), mainPanel(width = 6,plotlyOutput(&quot;plotly&quot;) ) ) server &lt;- function(input, output) { output$plotly &lt;- renderPlotly({ death &lt;- filter(death, date ==input$date) g &lt;- list( scope = &quot;global&quot;, showland = TRUE, landcolor = toRGB(&quot;gray85&quot;), subunitwidth = 1, countrywidth = 1, subunitcolor = toRGB(&quot;white&quot;), countrycolor = toRGB(&quot;white&quot;) ) fig&lt;-plot_geo(death) %&gt;% add_markers( x = ~long, y = ~lat, size = ~cases, color = ~cases, hoverinfo = &quot;text&quot;, text = ~ paste( death$country_region, &quot; &quot;, death$province_state, &quot;&lt;br /&gt;&quot;, &quot;deaths&quot;, death$cases ) ) %&gt;% layout(title = &quot;Global death&quot;, geo = g) fig}) } #shinyApp(ui=ui, server=server) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
